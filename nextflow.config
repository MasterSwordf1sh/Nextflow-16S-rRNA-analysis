/*
 * 16S rRNA Analysis Pipeline configuration file
 */

// Default parameters
params {
    // Input/output
    reads = "data/raw/*_R{1,2}.fastq.gz"
    metadata = "data/metadata.tsv"
    outdir = "results"
    
    // Resources
    cpus = 8
    memory = '16.GB'
    max_memory = '32.GB'
    max_cpus = 16
    max_time = '48.h'
    
    // Databases
    silva_db = "databases/silva_138_99_16S.qza"
    
    // Trimming parameters
    trim_front_f = 0
    trim_front_r = 0
    trunc_len_f = 0
    trunc_len_r = 0
    min_len = 100
    max_ee = 2.0
    
    // ASV inference parameters
    pooling = "pseudo"
    
    // Taxonomy classification parameters
    confidence = 0.8
    
    // Alpha diversity metrics
    alpha_metrics = "shannon,observed_features,faith_pd,evenness"
    
    // Beta diversity metrics
    beta_metrics = "jaccard,bray_curtis,unweighted_unifrac,weighted_unifrac"
    
    // Visualization
    n_taxa_barplot = 10
    
    // Skip options
    skip_fastqc = false
    skip_multiqc = false
    
    // Container options
    container = ''
}

// Process-specific resource requirements
process {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time = { check_max( 4.h * task.attempt, 'time' ) }
    
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries = 3
    maxErrors = '-1'
    
    withLabel:process_low {
        cpus = { check_max( 2 * task.attempt, 'cpus' ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
        time = { check_max( 4.h * task.attempt, 'time' ) }
    }
    withLabel:process_medium {
        cpus = { check_max( 6 * task.attempt, 'cpus' ) }
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time = { check_max( 8.h * task.attempt, 'time' ) }
    }
    withLabel:process_high {
        cpus = { check_max( params.max_cpus, 'cpus' ) }
        memory = { check_max( params.max_memory, 'memory' ) }
        time = { check_max( params.max_time, 'time' ) }
    }
}

// Profiles for different execution environments
profiles {
    standard {
        process.executor = 'local'
    }
    
    docker {
        docker.enabled = true
        docker.runOptions = '-u $(id -u):$(id -g)'
        process.container = 'qiime2/core:2022.8'
    }
    
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        process.container = 'docker://qiime2/core:2022.8'
    }
    
    conda {
        conda.enabled = true
        process.conda = 'bioconda::qiime2=2022.8 bioconda::fastqc=0.11.9 bioconda::multiqc=1.12 bioconda::trimmomatic=0.39'
    }
    
    slurm {
        process.executor = 'slurm'
        process.clusterOptions = '--account=your_account'
    }
}

// Function to check max resource limits
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "Warning: Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "Warning: Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "Warning: Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

// Manifest
manifest {
    name = '16S rRNA Analysis Pipeline'
    author = 'Your Name'
    homePage = 'https://github.com/username/16s-rRNA-pipeline'
    description = 'A complete workflow for processing and analyzing 16S rRNA amplicon sequencing data'
    mainScript = 'main.nf'
    nextflowVersion = '>=21.04.0'
    version = '1.0.0'
}

// Function to print execution summary when pipeline completes
workflow.onComplete {
    log.info """
    =============================================================
    16S rRNA ANALYSIS PIPELINE COMPLETED
    =============================================================
    Pipeline execution summary:
    ---------------------------
    Completed at  : ${workflow.complete}
    Duration      : ${workflow.duration}
    Success       : ${workflow.success}
    Work directory: ${workflow.workDir}
    Exit status   : ${workflow.exitStatus}
    =============================================================
    Results are available in: ${params.outdir}
    =============================================================
    """
}
